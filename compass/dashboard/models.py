from datetime import datetime, timedelta
from typing import Optional

from django.conf import settings
from django.db import models
from django.db.models import Count
from django.utils import timezone
from timescale.db.models.models import TimescaleModel
from timescale.db.models.querysets import TimescaleQuerySet

from mvp.models import Organization, Repository, RepositoryGroup
from mvp.utils import normalize_end_date, normalize_start_date


class GitDiffContext(TimescaleModel):
    repository = models.ForeignKey(Repository, on_delete=models.CASCADE)
    sha = models.CharField(max_length=40)
    file_path = models.CharField(max_length=500)
    git_diff_hash = models.CharField(max_length=64)

    # the category is generated by the LLM, so it can't be an Enum
    category = models.CharField(max_length=255)
    summary = models.TextField(default=None, blank=True, null=True)

    maintenance_relevance = models.TextField(default=None, blank=True, null=True)
    description_of_maintenance_relevance = models.TextField(default=None, blank=True, null=True)

    impact_on_product = models.TextField(default=None, blank=True, null=True)
    purpose_of_change = models.TextField(default=None, blank=True, null=True)

    class Meta:
        # time is a requirement from timescale
        unique_together = ["repository", "sha", "file_path", "git_diff_hash", "time"]

    @classmethod
    def get_organization_repositories_stats(
        cls,
        organization_id: int,
        start_date: Optional[datetime] = None,
        end_date: Optional[datetime] = None,
        group_ids: Optional[list[int]] = None,
    ) -> TimescaleQuerySet:
        """
        Retrieves aggregated statistics for repository groups.

        Args:
            organization_id (int): The organization ID.
            start_date (datetime, optional): The start date for filtering.
                Defaults to None.
            end_date (datetime, optional): The end date for filtering.
                Defaults to None.
            group_ids (List[int], optional): A list of group IDs for filtering.
                Defaults to None

        Returns:
            TimescaleQuerySet: query set of records.

        Raises:
            ValueError: If `organization_id` is not valid.
        """
        query_params = {
            "repository__organization_id": organization_id,
            **cls.get_query_params_for_time(start_date, end_date),
        }

        if group_ids:
            query_params["repository__group_id__in"] = group_ids

        return (
            cls.timescale.filter(**query_params)
            .select_related("repository")
            .values("repository__group_id", "category")
            .annotate(count=Count("category"))
        )

    @classmethod
    def get_query_params_for_time(
        cls,
        start_date: Optional[datetime] = None,
        end_date: Optional[datetime] = None,
    ):
        start_date = start_date or (timezone.now() - timedelta(days=settings.DEFAULT_TIME_WINDOW_DAYS))
        if not end_date:
            return {"time__gte": normalize_start_date(start_date)}

        return {
            "time__range": (
                timezone.make_aware(normalize_start_date(start_date)),
                timezone.make_aware(normalize_end_date(end_date)),
            )
        }


class GitDiffRepositoryGroupInsight(models.Model):
    organization = models.ForeignKey(Organization, on_delete=models.CASCADE)
    repository_group = models.ForeignKey(RepositoryGroup, on_delete=models.CASCADE, default=None, blank=True, null=True)
    start_date = models.DateField(default=None, blank=True, null=True)
    end_date = models.DateField(default=None, blank=True, null=True)
    category = models.CharField(max_length=255)
    percentage = models.DecimalField(max_digits=5, decimal_places=2, blank=True, null=True)
    justification = models.TextField(default=None, blank=True, null=True)
    examples = models.TextField(default=None, blank=True, null=True)
    generated = models.BooleanField(default=False)

    class Meta:
        unique_together = ["repository_group", "start_date", "end_date", "category"]
