name: Execute contextualization scripts

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment'
        default: 'ip-172-31-77-237'
        type: environment
        required: true
      orgids:
        description: 'Narrow execution just to given organization IDs (separated by space). Likely choices: 519 (SM), 1518 (AT), 1529 (JS), 1479 (Sema-all), 1508 (MJ)'
        type: string
        required: false
      skip_orgids:
        description: 'Skips orgs even if they have contextualization enabled (space-separated).'
        type: string
        required: false
      day_interval:
        description: 'Day interval to be executed.'
        type: string
        required: true
      pipelines:
        description: 'Execute one or more pipelines (space-separated).'
        type: string
        required: true
      by_group:
        description: '(by_group) Calls the pipelines twice: first for the entire organization as whole, and then by repository groups.'
        type: boolean
        required: false
      import_only:
        description: '(import_only) Only copy/import the data without executing the scripts.'
        type: boolean
        required: false
      dry_run:
        description: '(dry_run) Do not execute the scripts, only print the output.'
        type: boolean
        required: false
      send_notification:
        description: 'Send notification'
        default: true
        type: boolean
        required: false

jobs:
  contextualization_script:
    name: Contextualization script run
    runs-on: ${{ inputs.environment || 'ip-172-31-77-237' }}
    timeout-minutes: 5
    environment: ${{ inputs.environment || 'ip-172-31-77-237' }}
    outputs:
      script_parameters: ${{ steps.apicall-data.outputs.script_parameters }}
    defaults:
      run:
        shell: bash
        working-directory: /app
    container:
      image: ghcr.io/semalab/cto-tool-builder:latest
      env:
        ORGIDS: ${{ inputs.orgids }}
        SKIP_ORGIDS: ${{ inputs.skip_orgids }}
        DAY_INTERVAL: ${{ inputs.day_interval }}
        PIPELINES: ${{ inputs.pipelines }}
        BY_GROUP: ${{ inputs.by_group }}
        IMPORT_ONLY: ${{ inputs.import_only }}
        DRY_RUN: ${{ inputs.dry_run }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.github_token }}
      volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    steps:
    - name: Generate API call data
      id: apicall-data
      run: |
        PARAM_STRING=""
        if [[ -n "$ORGIDS" ]]; then
            PARAM_STRING+=" --orgids \"$ORGIDS\""
        fi
        if [[ -n "$SKIP_ORGIDS" ]]; then
            PARAM_STRING+=" --skip-orgids \"$SKIP_ORGIDS\""
        fi
        if [[ -n "$DAY_INTERVAL" ]]; then
            PARAM_STRING+=" --day-interval $DAY_INTERVAL"
        fi
        if [[ -n "$PIPELINES" ]]; then
            PARAM_STRING+=" --pipelines \"$PIPELINES\""
        fi
        if [[ -n "$BY_GROUP" ]] && [ "$BY_GROUP" = "true" ] || [ "$BY_GROUP" = "1" ]; then
            PARAM_STRING+=" --by-group"
        fi
        if [[ -n "$IMPORT_ONLY" ]] && [ "$IMPORT_ONLY" = "true" ] || [ "$IMPORT_ONLY" = "1" ]; then
            PARAM_STRING+=" --import-only"
        fi
        if [[ -n "$DRY_RUN" ]] && [ "$DRY_RUN" = "true" ] || [ "$DRY_RUN" = "1" ]; then
            PARAM_STRING+=" --dry-run"
        fi

        cat > curl_data.yaml <<EOF
            id: contextualization_script_job
            title: "contextualization_script.sh"
            params:
                script: |-
                    #!/bin/bash
                    # Escaping from Cronicle container
                    /usr/bin/nsenter --target 1 --mount --uts --ipc --net /bin/bash -c '
                    set -e
                    echo "Executing sudo -u cto-tool contextualization_script.sh"
                    sudo -u cto-tool /home/cto-tool/cto-tool/scripts/contextualization_script.sh ${PARAM_STRING}
                    '
                annotate: 0
                json: 0
            web_hook: ''
        EOF
        yq -j '.' curl_data.yaml > curl_data.json

        echo "script_parameters=${PARAM_STRING}" >> $GITHUB_OUTPUT

    - name: Execute contextualization script run API call
      run: |
        CURL_DATA=`cat curl_data.json`
        docker exec cronicle curl -s http://localhost:3012/api/app/run_event/v1?api_key=${{ secrets.CRONICLE_GITHUB_ACTIONS_API_KEY }} \
        -H 'Content-type: application/json' -H "Host: cronicle.infra.semasoftware.com" --data "${CURL_DATA}"

  notify:
    name: Send job notifications
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: ${{ inputs.send_notification }}
    needs:
      - contextualization_script
    steps:
    - name: Generate Slack message
      id: message
      run: |
        cat > slack_message.yaml <<EOF
          blocks:
          - type: section
            text:
              type: mrkdwn
              text: |-
                *:zap: Script executed manually by ${{ github.actor }}*
          - type: section
            text:
              type: mrkdwn
              text: |-
                contextualization_script.sh${{ needs.apicall-data.outputs.script_parameters }}
          - type: divider
          - type: context
            elements:
            - type: mrkdwn
              text: |-
                <https://github.com/Semalab/cto-tool/wiki/Cronicle|Wiki> | <https://cronicle.infra.semasoftware.com:4430/|Cronicle UI> | <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|Github Actions job>
        EOF
        cat slack_message.yaml

    - name: Post release message
      uses: slackapi/slack-github-action@v2.1.0
      with:
        webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
        webhook-type: incoming-webhook
        payload-file-path: slack_message.yaml
