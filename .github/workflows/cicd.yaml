name: CI/CD

on:
  pull_request:
    branches: [ "*" ]
  merge_group:
  release:
    types: [ released ]
  push:
    branches: [ "main" ]
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment'
        default: 'ip-172-31-77-237'
        type: environment
        required: true
      send_notification:
        description: Send release notification
        default: false
        type: boolean
        required: true

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}-${{ github.event_name == 'release' || github.event_name == 'workflow_dispatch' }}
  cancel-in-progress: true

env:
  SOURCE_DATE_EPOCH: 0
  BUILDKIT_INLINE_CACHE: 1
  DOCKER_METADATA_PR_HEAD_SHA: 0

jobs:
  lint:
    name: Pre-commit hooks
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true
      - uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
      - uses: actions/setup-node@v4
        with:
          node-version: '20.13'
          cache: 'npm'
          cache-dependency-path: vue-frontend/package-lock.json
      - name: Install Node dependencies
        run: npm ci
        working-directory: vue-frontend
      - name: Checking if the lockfile is up-to-date
        run: uv lock --check
      - name: Pre-commit hooks run
        run: uvx pre-commit run --all-files
        
  build-and-push-image:
    name: Build & push ${{ matrix.buildtarget }} image
    runs-on: ubuntu-latest
    timeout-minutes: 10
    strategy:
      fail-fast: true
      matrix:
        include:
          - buildtarget: cto-tool
            dockerfile: ./build/cto-tool/Dockerfile
            image: ghcr.io/${{ github.repository }}
          - buildtarget: vue-frontend
            dockerfile: ./build/cto-tool/Dockerfile
            image: ghcr.io/${{ github.repository }}-frontend
          - buildtarget: builder
            dockerfile: ./build/cto-tool/Dockerfile
            image: ghcr.io/${{ github.repository }}-builder
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        id: setup-buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: latest
      # uncomment when we switch to self hosted runners
      #- name: Cache
      #  id: cache
      #  uses: actions/cache@v3
      #  with:
      #    path: build-cache-${{ matrix.buildtarget }}
      #    key: build-cache-${{ matrix.buildtarget }}-${{ hashFiles('./build/*/Dockerfile') }}

      #- name: Restore Docker cache mounts
      #  uses: reproducible-containers/buildkit-cache-dance@v3
      #  with:
      #    builder: ${{ steps.setup-buildx.outputs.name }}
      #    cache-dir: build-cache-${{ matrix.buildtarget }}
      #    dockerfile: ${{ matrix.dockerfile }}
      #    skip-extraction: ${{ steps.cache.outputs.cache-hit }}

      - name: Extract GitHub metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ matrix.image }}
          tags: |
              type=ref,event=branch
              type=ref,event=pr
              type=ref,event=tag
              type=semver,pattern={{version}}
              type=semver,pattern={{raw}}
              type=raw,value=latest,enable={{is_default_branch}}
              type=sha,format=long,prefix=sha-

      - name: Build and push cto-tool Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          target: ${{ matrix.buildtarget }}
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ matrix.image }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

  frontend-tests:
    name: Vue Frontend Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs:
      - build-and-push-image
    defaults:
      run:
        shell: bash
        working-directory: /app
    container:
      image: ghcr.io/semalab/cto-tool-frontend:sha-${{ github.sha }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.github_token }}
      env:
        VITE_SITE_DOMAIN: http://127.0.0.1:8000
      options: --cpus 2
    steps:
      - name: Type check
        run: |
          npm run type-check
      - name: Run Unit tests
        run: |
          npm run test:unit

  cto-tool-tests:
    name: Django Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs:
      - build-and-push-image
    defaults:
      run:
        shell: bash
        working-directory: /app
    container:
      image: ghcr.io/semalab/cto-tool:sha-${{ github.sha }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.github_token }}
      env:
        # Global settings
        DEBUG: false
        TZ: UTC

        # Django settings
        SECRET_KEY: django-insecure-b=!wdhvk68_=tzx&6(7+%0a4prhv(#36p7xy!$p(i1n*_^ebsk
        ALLOWED_HOSTS: 127.0.0.1,localhost
        SITE_DOMAIN: http://127.0.0.1:8000
        DJANGO_SETTINGS_MODULE: cto_tool.settings
        INTERNAL_IPS: 127.0.0.1,localhost
        HASH_SALT: w}I(E]2p[v&Xgv'tA<m8jo$hy9wT8K

        # Email
        EMAIL_BACKEND: django.core.mail.backends.console.EmailBackend
        SUPPORT_EMAIL: support@semasoftware.com
        SEND_ANALYSIS_STARTED_EMAIL_ACTIVE: false
        SEND_IMPORT_DONE_EMAIL_ACTIVE: false
        SEND_GBOM_READY_EMAIL_ACTIVE: false

        # GitHub App (a client secret and private key path should be set via GitHub Secrets in CI)
        GITHUB_APP_ID: " "
        GITHUB_APP_CLIENT_ID: " "
        GITHUB_APP_CLIENT_SECRET: " "
        GITHUB_APP_NAME: " "
        GITHUB_APP_PRIVATE_KEY_PATH: " "
        GITHUB_APP_WEBHOOK_SECRET: " "
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

        # AI Engine directories
        AI_CODE_REPOSITORY_DIRECTORY: test_repos
        AI_CODE_PR_DIRECTORY: pr-repos
        GENAI_FEEDBACK_DIRECTORY: test_gen_ai_feedback
        GBOM_PRECOMPUTED_DIRECTORY: gbom-precomputed
        WEBHOOK_DATA_DIRECTORY: webhook-data
        AI_ENGINE_DIRECTORY: " "

        # Postgres / Timescale DB
        RDS_DB_NAME: sema
        RDS_USERNAME: postgres
        RDS_PASSWORD: postgres
        RDS_HOSTNAME: postgres
        RDS_PORT: 5432
        TIMESCALE_USERNAME: postgres
        TIMESCALE_PASSWORD: postgres
        TIMESCALE_HOST: postgres
        TIMESCALE_PORT: 5432

        # LLM mocking
        USE_HTTP_CALL_MOCKS: true
        MOCKED_END_DATE: 2025-06-11
        CASSETTES_PATH: .ci_cassettes
        LLM: claude
        ANTHROPIC_API_KEY: " "
        GOOGLE_API_KEY: " "
        REQUESTS_PER_SECOND: 15

      options: --cpus 2
    services:
      postgres:
        image: timescale/timescaledb:latest-pg17
        env:
          POSTGRES_DB: sema
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_INITDB_ARGS: "-c max_connections=200"
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Collect static
        run: |
          uv run --locked python manage.py collectstatic --noinput
      - name: Run Tests
        run: |
          uv run --locked python manage.py test --noinput --verbosity=2 --parallel --keepdb

  cto-tool-e2e-tests:
    name: E2E Pipeline Test
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: read
      packages: read
      attestations: write
      id-token: write
    needs:
      - build-and-push-image
    defaults:
      run:
        shell: bash
        working-directory: /app
    container:
      image: ghcr.io/semalab/cto-tool:sha-${{ github.sha }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.github_token }}
      env:
        # Global settings
        DEBUG: false
        TZ: UTC
        ENABLE_TEST_LOGGING: true

        # Django settings
        SECRET_KEY: django-insecure-b=!wdhvk68_=tzx&6(7+%0a4prhv(#36p7xy!$p(i1n*_^ebsk
        ALLOWED_HOSTS: 127.0.0.1,localhost
        SITE_DOMAIN: http://127.0.0.1:8000
        DJANGO_SETTINGS_MODULE: cto_tool.settings
        INTERNAL_IPS: 127.0.0.1,localhost
        HASH_SALT: w}I(E]2p[v&Xgv'tA<m8jo$hy9wT8K

        # Email
        EMAIL_BACKEND: django.core.mail.backends.console.EmailBackend
        SUPPORT_EMAIL: support@semasoftware.com
        SEND_ANALYSIS_STARTED_EMAIL_ACTIVE: false
        SEND_IMPORT_DONE_EMAIL_ACTIVE: false
        SEND_GBOM_READY_EMAIL_ACTIVE: false

        # GitHub App (a client secret and private key path should be set via GitHub Secrets in CI)
        GITHUB_APP_ID: " "
        GITHUB_APP_CLIENT_ID: " "
        GITHUB_APP_CLIENT_SECRET: " "
        GITHUB_APP_NAME: " "
        GITHUB_APP_PRIVATE_KEY_PATH: " "
        GITHUB_APP_WEBHOOK_SECRET: " "
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

        # AI Engine directories
        AI_CODE_REPOSITORY_DIRECTORY: test_repos
        AI_CODE_PR_DIRECTORY: pr-repos
        GENAI_FEEDBACK_DIRECTORY: test_gen_ai_feedback
        GBOM_PRECOMPUTED_DIRECTORY: gbom-precomputed
        WEBHOOK_DATA_DIRECTORY: webhook-data
        AI_ENGINE_DIRECTORY: " "

        # Postgres / Timescale DB
        RDS_DB_NAME: sema
        RDS_USERNAME: postgres
        RDS_PASSWORD: postgres
        RDS_HOSTNAME: postgres
        RDS_PORT: 5432
        TIMESCALE_USERNAME: postgres
        TIMESCALE_PASSWORD: postgres
        TIMESCALE_HOST: postgres
        TIMESCALE_PORT: 5432

        # LLM mocking
        USE_HTTP_CALL_MOCKS: true
        MOCKED_END_DATE: 2025-06-11
        CASSETTES_PATH: .ci_cassettes
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
        REQUESTS_PER_SECOND: 15
      options: --cpus 2
    services:
      postgres:
        image: timescale/timescaledb:latest-pg17
        env:
          POSTGRES_DB: sema
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_INITDB_ARGS: "-c max_connections=200"
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout test repo
        uses: actions/checkout@v4
        with:
          repository: Semalab/last_commit_sha
          ssh-key: ${{ secrets.SSH_PRIVATE_KEY_SUBMODULE }}
          persist-credentials: true
          fetch-depth: 0
          lfs: true
      - name: Run DB migrations
        run: |
          uv run --locked manage.py migrate --noinput
      - name: Run E2E test for pipeline
        run: |
          cp -rT /__w/cto-tool/cto-tool /app/test_repos/r3J9xlXxZeyQ/r3J9xlXxZeyQ/last_commit_sha
          uv run --locked manage.py test \
            e2e_tests.pipeline_runs_e2e.TestDailyPipelineE2E.test_daily_pipeline_without_jira_connection
      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-pipeline-artifacts
          include-hidden-files: true
          retention-days: 7
          path: |
            /app/.ci_cassettes/
            /app/test_repos/

  check-deploy-window:
    name: Check Deploy Window
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: ${{ github.event_name == 'release' || github.event_name == 'workflow_dispatch' }}
    outputs:
      environment: ${{ steps.time-check.outputs.environment }}
    steps:
    - name: Check NY time window
      id: time-check
      run: |
        # Get current time in NY timezone
        NY_TIME=$(TZ=America/New_York date +%H)
        
        if [ "$NY_TIME" -ge 7 ] && [ "$NY_TIME" -lt 22 ]; then
          echo "environment=OUTSIDE_DEPLOY_WINDOW"  >> $GITHUB_OUTPUT
        else
          echo "environment=ip-172-31-77-237" >> $GITHUB_OUTPUT
        fi
                
        echo "NY time hour: $NY_TIME"

  release:
    name: Deploy
    runs-on: ${{ inputs.environment || 'ip-172-31-77-237' }}
    timeout-minutes: 10
    environment: ${{ inputs.environment || needs.check-deploy-window.outputs.environment }}
    if: ${{ github.event_name == 'release' || github.event_name == 'workflow_dispatch' }}
    needs:
    - check-deploy-window
    - frontend-tests
    - cto-tool-tests
    - cto-tool-e2e-tests
    defaults:
      run:
        shell: bash
        working-directory: /app
    container:
      image: ghcr.io/semalab/cto-tool:sha-${{ github.sha }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.github_token }}
      options: --cpus 2 --privileged --pid=host --privileged --cap-add=ALL --pid=host --ipc=host
      volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    steps:
    - name: Legacy deploy
      run: |
        # Keep it same as deploy.sh in the repo untill we switch to docker containers
        nsenter --target 1 --mount --uts --ipc --net /bin/bash -c 'sudo su -c "
          set -e; # Exit on error

          cd /home/cto-tool/cto-tool

          # Enable maintenance mode
          touch maintenance.enabled

          # Checkout release commit
          git status
          git remote set-url origin git@github.com-cto-tool:Semalab/cto-tool.git
          git fetch --all
          git checkout --force ${{ github.sha }}

          # Build Vue
          cd vue-frontend
          npm install
          npm run build
          cd ..

          # Update dependencies
          uv sync --locked

          # Run Django migrations
          USE_REPLICA_DATABASE=False
          uv run --locked python3 manage.py migrate

          # Add version to filenames of static files
          uv run --locked python3 manage.py collectstatic --noinput

          # Init groups and permissions
          uv run --locked python3 manage.py init_groups

          # Changing files ownership to cto-tool
          chown -R cto-tool:www-data /home/cto-tool/cto-tool/*
          chmod -R 770 /home/cto-tool/cto-tool/*

          # Update Apache configuration
          cp apache.conf /etc/apache2/sites-available/000-default.conf
          /etc/init.d/apache2 reload

          # Disable maintenance mode
          rm maintenance.enabled
        "'
    - name: Check app
      run: |
        curl -f -LI https://app.semasoftware.com/

  docker-deploy:
    name: Docker deploy
    runs-on: ${{ inputs.environment || 'ip-172-31-77-237' }}
    timeout-minutes: 10
    environment: ${{ inputs.environment || needs.check-deploy-window.outputs.environment }}
    if: ${{ github.event_name == 'release' || github.event_name == 'workflow_dispatch' }}
    needs:
    - release
    defaults:
      run:
        shell: bash
        working-directory: /app
    container:
      image: ghcr.io/semalab/cto-tool-builder:sha-${{ github.sha }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.github_token }}
      options: --cpus 2 --privileged --pid=host --privileged --cap-add=ALL --pid=host --ipc=host
      volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /opt/deployments:/opt/deployments
      - /root/.env.override:/root/.env.override
    steps:
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy infrastructure & copy released deployments configuration to host machine
        env:
          HOME: /root
        run: |
          cp -r /app/deployments /opt
          cd /opt/deployments/infra/
          docker compose up --remove-orphans --detach --wait
      - name: Restart infrastructure
        env:
          HOME: /root
        run: |
          cd /opt/deployments/infra/
          echo "Step disabled until apps not in the containers"
          # docker compose restart
          docker compose ps -a --no-trunc --orphans
      - name: Get status and first logs
        if: always()
        env:
          HOME: /root
        run: |
          cd /opt/deployments/infra/
          docker compose logs --tail 1000

  notify:
    name: Send release notifications
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: ${{ github.event_name == 'release' || inputs.send_notification }}
    needs:
      - release
      - docker-deploy
    steps:
    - name: Generate Slack message
      id: message
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GH_REPO: ${{ github.server_url }}/${{ github.repository }}
      run: |
        RELEASE_AUTHOR="$(gh release view ${{ github.ref_name }} --json author --jq '.author.login')"
        RELEASE_BODY="$(gh release view ${{ github.ref_name }} --json body --jq '.body | tojson')"
        # Format github links. jira links, bulletpoints and bold words
        RELEASE_BODY_POSTFORMATTED=$(echo "$RELEASE_BODY" |\
          sed -E 's#(https://github\.com/[^/]+/[^/]+/pull/)([0-9]+)#<\1\2|\2>#g' |\
          sed -E 's#\b(SIP-[0-9]+)\b#<https://semalab.atlassian.net/browse/\1|\1>#g' |\
          sed -E 's/\\r\\n\*/\\r\\n•/g' |\
          sed -E 's/\*\*/\*/g')

        cat > slack_message.yaml <<EOF
          blocks:
          - type: header
            text:
              type: plain_text
              text: |-
                :mega: SIP release ${{ github.ref_name }} deployed
          - type: context
            elements:
            - type: mrkdwn
              text: |-
                Release author: ${RELEASE_AUTHOR} | <${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ github.ref_name }}|View on GitHub> | <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|Deployment job>
          - type: divider
          - type: section
            text:
              type: mrkdwn
              text: |-
                *Release content*
          attachments:
          - mrkdwn_in:
            - text
            color: "#d1dff6"
            text: ${RELEASE_BODY_POSTFORMATTED}
        EOF
        cat slack_message.yaml

    - name: Post release message
      uses: slackapi/slack-github-action@v2.1.0
      with:
        webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
        webhook-type: incoming-webhook
        payload-file-path: slack_message.yaml
