"""
Django settings for cto_tool project.

Generated by 'django-admin startproject' using Django 4.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import json
import logging
import os
import sys
from pathlib import Path

import environ

env = environ.Env(
    # set casting, default value
    DEBUG=(bool, False)
)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Take environment variables from .env file
environ.Env.read_env(os.path.join(BASE_DIR, ".env"))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env("DEBUG")

ALLOWED_HOSTS = env.list("ALLOWED_HOSTS")

SITE_DOMAIN = env("SITE_DOMAIN")

# Application definition

CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.db.DatabaseCache",
        "LOCATION": "django_cache",
    }
}

INSTALLED_APPS = [
    # AICM apps
    "api.apps.ApiConfig",
    "mvp.apps.MvpConfig",
    # Compass apps
    "compass.budget.apps.CompassBudgetConfig",
    "compass.codebasereports.apps.CompassCodebaseReportsConfig",
    "compass.compliance.apps.CompassComplianceConfig",
    "compass.dashboard.apps.CompassDashboardConfig",
    "compass.documents.apps.CompassDocumentsConfig",
    "compass.integrations.apps.CompassIntegrationConfig",
    "compass.organization.apps.CompassOrganizationConfig",
    "compass.projects.apps.ProjectsConfig",
    "compass.roadmap.apps.CompassRoadmapConfig",
    "compass.team.apps.CompassTeamConfig",
    "compass.contextualization.apps.CompassContextualizationConfig",
    # Django apps
    "django_admin_env_notice",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # Third-party apps
    "treebeard",
    "widget_tweaks",
    "hijack",
    "hijack.contrib.admin",
    "inline_static",
    "import_export",
    "oauth2_provider",
    "rest_framework",
    "allauth",
    "allauth.account",
    "allauth.mfa",
    "auditlog",
    "django_extensions",
    "imagekit",
]

if DEBUG:
    INSTALLED_APPS += ["silk", "debug_toolbar"]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "oauth2_provider.middleware.OAuth2TokenMiddleware",
    "allauth.account.middleware.AccountMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

if DEBUG:
    MIDDLEWARE += [
        "silk.middleware.SilkyMiddleware",
        "debug_toolbar.middleware.DebugToolbarMiddleware",
    ]

MIDDLEWARE += [
    "mvp.middlewares.ClearCookiesMiddleware",
    "mvp.middlewares.CurrentOrganizationMiddleware",
    "mvp.middlewares.MFAMiddleware",
    "mvp.middlewares.PostHogMiddleware",
    "mvp.middlewares.SentryMiddleware",
    "mvp.middlewares.Doc365ApiKeyMiddleware",
    "hijack.middleware.HijackUserMiddleware",
    "auditlog.middleware.AuditlogMiddleware",
]

INTERNAL_IPS = env.list("INTERNAL_IPS", default=[])

ROOT_URLCONF = "cto_tool.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            os.path.join(BASE_DIR, "templates"),
            os.path.join(BASE_DIR, "compass/templates"),
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "django_admin_env_notice.context_processors.from_settings",
                "mvp.context_processors.active_system_messages",
                "mvp.context_processors.global_settings",
                "mvp.context_processors.show_initiatives_menu",
            ],
        },
    },
]

WSGI_APPLICATION = "cto_tool.wsgi.application"

OAUTH2_PROVIDER = {
    "ALLOWED_REDIRECT_URI_SCHEMES": ["http", "https", "sema", "vscode", "vscodium"],
    "ACCESS_TOKEN_EXPIRE_SECONDS": 36000,  # 10 hours
    "SCOPES": {"read": "Read scope", "write": "Write scope"},
}

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "timescale.db.backends.postgresql",
        "NAME": env("RDS_DB_NAME"),
        "USER": env("RDS_USERNAME"),
        "PASSWORD": env("RDS_PASSWORD"),
        "HOST": env("RDS_HOSTNAME"),
        "PORT": env.int("RDS_PORT", default=5432),
    }
}
# this condition prevents an ImproperlyConfigured error when replica vars are not set
if "REPLICA_DB_NAME" in os.environ:
    # replica is only used when USE_REPLICA_DATABASE is set to true
    DATABASES["replica"] = {
        "ENGINE": "timescale.db.backends.postgresql",
        "NAME": env.str("REPLICA_DB_NAME", default=""),
        "USER": env.str("REPLICA_DB_USER", default=""),
        "PASSWORD": env.str("REPLICA_DB_PASS", default=""),
        "HOST": env.str("REPLICA_DB_HOST", default=""),
        "PORT": env.int("REPLICA_DB_PORT", default=5432),
    }

USE_REPLICA_DATABASE = env.bool("USE_REPLICA_DATABASE", default=False)
DATABASE_ROUTERS = ["cto_tool.router.ReplicaRouter"]

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "/static/"

STATIC_ROOT = os.path.join(BASE_DIR, "mvp/dist/")

MEDIA_URL = "/media/"

MEDIA_ROOT = os.path.join(BASE_DIR, "media")


STATICFILES_STORAGE = "django.contrib.staticfiles.storage.ManifestStaticFilesStorage"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# SSL settings

CSRF_COOKIE_SECURE = env.bool("CSRF_COOKIE_SECURE", default=False)
CSRF_FAILURE_VIEW = "mvp.views.csrf_failure.csrf_failure"
CSRF_TRUSTED_ORIGINS = env.list("CSRF_TRUSTED_ORIGINS", default=[])

SESSION_COOKIE_SECURE = env.bool("SESSION_COOKIE_SECURE", default=False)
SESSION_EXPIRE_AT_BROWSER_CLOSE = env.bool("SESSION_EXPIRE_AT_BROWSER_CLOSE", default=False)
SESSION_COOKIE_AGE = env.int("SESSION_COOKIE_AGE", default=604800)
SECURE_SSL_REDIRECT = env.bool("SECURE_SSL_REDIRECT", default=False)

# Email

EMAIL_BACKEND = env("EMAIL_BACKEND", default="")
EMAIL_HOST = env("EMAIL_HOST", default="")
EMAIL_PORT = env.int("EMAIL_PORT", default=0)
EMAIL_USE_TLS = env.bool("EMAIL_USE_TLS", default=True)
EMAIL_HOST_USER = env("EMAIL_HOST_USER", default="")
EMAIL_HOST_PASSWORD = env("EMAIL_HOST_PASSWORD", default="")
DEFAULT_FROM_EMAIL = env("DEFAULT_FROM_EMAIL", default="")
ANALYSIS_COMPLETE_EMAIL = env("ANALYSIS_COMPLETE_EMAIL", default="")
SUPPORT_EMAIL = env("SUPPORT_EMAIL")

# Custom settings

APP_NAME = env("APP_NAME", default="Sema Intelligence Platform")

ACCOUNT_LOGIN_METHODS = {"email"}
ACCOUNT_EMAIL_VERIFICATION = "none"
ACCOUNT_SIGNUP_FIELDS = ["email*", "password1*", "password2*"]
ACCOUNT_LOGOUT_ON_GET = False
ACCOUNT_DEFAULT_HTTP_PROTOCOL = "http" if DEBUG else "https"
ACCOUNT_FORMS = {"reset_password_from_key": "mvp.forms.CustomResetPasswordKeyForm"}

AUTH_USER_MODEL = "mvp.CustomUser"

AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
    "allauth.account.auth_backends.AuthenticationBackend",
]

MFA_TOTP_ISSUER = env("MFA_TOTP_ISSUER", default="Sema")
MFA_TOTP_TOLERANCE = env.int("MFA_TOTP_TOLERANCE", default=1)

PASSWORD_HISTORY_MAX_COUNT = env.int("PASSWORD_HISTORY_MAX_COUNT", default=5)

LOGIN_URL = "/accounts/login/"
LOGIN_REDIRECT_URL = "/"
LOGOUT_REDIRECT_URL = "/accounts/login/"

HASH_SALT = env("HASH_SALT")
HASH_MIN_LENGTH = env.int("HASH_MIN_LENGTH", default=12)

GITHUB_APP_ID = env("GITHUB_APP_ID")
GITHUB_APP_CLIENT_ID = env("GITHUB_APP_CLIENT_ID")
GITHUB_APP_CLIENT_SECRET = env("GITHUB_APP_CLIENT_SECRET")
GITHUB_APP_NAME = env("GITHUB_APP_NAME")
GITHUB_APP_PRIVATE_KEY_PATH = env("GITHUB_APP_PRIVATE_KEY_PATH")
GITHUB_APP_WEBHOOK_SECRET = env("GITHUB_APP_WEBHOOK_SECRET")

POSTHOG_PROJECT_API_KEY = env("POSTHOG_PROJECT_API_KEY", default="")
POSTHOG_INSTANCE_ADDRESS = env("POSTHOG_INSTANCE_ADDRESS", default="")

DOC365_API_KEY = env("DOC365_API_KEY", default="")

SENTRY_DSN = env("SENTRY_DSN", default="")
OTEL_EXPORTER_OTLP_ENDPOINT = env("OTEL_EXPORTER_OTLP_ENDPOINT", default="")

TESTING = len(sys.argv) > 1 and sys.argv[1] == "test"

if TESTING and not env.bool("ENABLE_TEST_LOGGING", default=False):
    logging.disable(logging.WARN)


class RequireOtlpToBeEnabled(logging.Filter):
    def filter(self, record):
        return OTEL_EXPORTER_OTLP_ENDPOINT


LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {
            "level": "INFO",
            "class": "logging.StreamHandler",
            "formatter": "verbose",
        },
        "otlp": {
            "level": "INFO",
            "class": "mvp.opentelemetry_utils.OtlpLoggingHandler",
            "filters": ["require_otlp_to_be_enabled"],
        },
    },
    "filters": {
        "require_otlp_to_be_enabled": {
            "()": "cto_tool.settings.RequireOtlpToBeEnabled",
        },
    },
    "root": {
        "handlers": ["console", "otlp"],
        "level": "DEBUG",
    },
    "loggers": {
        "django": {
            "handlers": ["console", "otlp"],
            "level": "INFO",
            "propagate": False,
        },
    },
    "formatters": {
        "verbose": {
            "format": "{asctime} {levelname} {module} {funcName} | {message}",
            "style": "{",
        },
        "simple": {
            "format": "[{levelname}] {asctime} | {message}",
            "style": "{",
        },
    },
}

AI_CODE_DATE_CUTOFF = env("AI_CODE_DATE_CUTOFF", default="2021-06-01")
AI_CODE_SCORE_THRESHOLD = env.float("AI_CODE_SCORE_THRESHOLD", default=0.99)
AI_CODE_SCORE_LABEL_AI = env("AI_CODE_SCORE_LABEL_AI", default="GenAI")
AI_CODE_SCORE_LABEL_BLENDED = env("AI_CODE_SCORE_LABEL_BLENDED", default="Blended")
AI_CODE_SCORE_LABEL_HUMAN = env("AI_CODE_SCORE_LABEL_HUMAN", default="NotGenAI")
AI_CODE_SCORE_LABEL_NOT_EVALUATED = env("AI_CODE_SCORE_LABEL_NOT_EVALUATED", default="NotEvaluated")
AI_CODE_REPOSITORY_DIRECTORY = env("AI_CODE_REPOSITORY_DIRECTORY")
AI_CODE_PR_DIRECTORY = env("AI_CODE_PR_DIRECTORY")
GENAI_FEEDBACK_DIRECTORY = env("GENAI_FEEDBACK_DIRECTORY")
GBOM_PRECOMPUTED_DIRECTORY = env("GBOM_PRECOMPUTED_DIRECTORY")
AI_ENGINE_DIRECTORY = env("AI_ENGINE_DIRECTORY")
AI_ENGINE_PYTHON = env("AI_ENGINE_PYTHON", default="python")


DEFAULT_TIME_WINDOW_DAYS = env.int("DEFAULT_TIME_WINDOW_DAYS", default=13)  # 2 weeks

# disables browsable apis in production
DEFAULT_RENDERER_CLASSES = ("rest_framework.renderers.JSONRenderer",)
if DEBUG:
    DEFAULT_RENDERER_CLASSES += ("rest_framework.renderers.BrowsableAPIRenderer",)

REST_FRAMEWORK = {
    "DEFAULT_VERSIONING_CLASS": "rest_framework.versioning.URLPathVersioning",
    "DEFAULT_VERSION": "v1",
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "oauth2_provider.contrib.rest_framework.OAuth2Authentication",
        "rest_framework.authentication.SessionAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": ("rest_framework.permissions.IsAuthenticated",),
    "DEFAULT_RENDERER_CLASSES": DEFAULT_RENDERER_CLASSES,
    "COERCE_DECIMAL_TO_STRING": False,
}

DATA_UPLOAD_MAX_NUMBER_FIELDS = 5000

# Default values for new organizations that are usually pilots
# NOTE: we don't want migrations if these values change in the future
DEFAULT_LIMIT_SCANS = env.int("DEFAULT_LIMIT_SCANS", default=1)
DEFAULT_LIMIT_REPOSITORIES = env.int("DEFAULT_LIMIT_REPOSITORIES", default=2)
DEFAULT_LIMIT_LINES_PER_REPOSITORY = env.int("DEFAULT_LIMIT_LINES_PER_REPOSITORY", default=10000)
DEFAULT_FLAG_STATUS_CHECK_ENABLED = env.bool("DEFAULT_FLAG_STATUS_CHECK_ENABLED", default=False)
DEFAULT_FLAG_CONTEXTUALIZATION_ENABLED = env.bool("DEFAULT_FLAG_CONTEXTUALIZATION_ENABLED", default=True)

SQS_REGION = env("SQS_REGION", default="")
SQS_QUEUE_URL_SMALL = env("SQS_QUEUE_URL_SMALL", default="")
SQS_QUEUE_URL_MEDIUM = env("SQS_QUEUE_URL_MEDIUM", default="")
SQS_QUEUE_URL_LARGE = env("SQS_QUEUE_URL_LARGE", default="")

QUEUE_NUM_LINES_THRESHOLD_SMALL = env.int("QUEUE_NUM_LINES_SMALL", default=500)
QUEUE_NUM_LINES_THRESHOLD_MEDIUM = env.int("QUEUE_NUM_LINES_MEDIUM", default=2000)

REMOTE_ANALYSIS_CHECK_INTERVAL = env.int("REMOTE_ANALYSIS_CHECK_INTERVAL", 30)
REMOTE_ANALYSIS_SOFT_MAX_TIME = env.int("REMOTE_ANALYSIS_MAX_TIME_SOFT", 600)
REMOTE_ANALYSIS_FAIL_MAX_TIME = env.int("REMOTE_ANALYSIS_MAX_TIME_SOFT", 3600)

WEBHOOK_DATA_DIRECTORY = env("WEBHOOK_DATA_DIRECTORY")

BLOCKED_EMAIL_TEXTS = env.list("BLOCKED_EMAIL_TEXTS", default=[])

SEND_ANALYSIS_STARTED_EMAIL_ACTIVE = env.bool("SEND_ANALYSIS_STARTED_EMAIL_ACTIVE", default=True)
SEND_IMPORT_DONE_EMAIL_ACTIVE = env.bool("SEND_IMPORT_DONE_EMAIL_ACTIVE", default=True)
SEND_GBOM_READY_EMAIL_ACTIVE = env.bool("SEND_GBOM_READY_EMAIL_ACTIVE", default=True)

# MailChimp
MAILCHIMP_ACTIVE = env.bool("MAILCHIMP_ACTIVE", default=False)
MAILCHIMP_API_KEY = env("MAILCHIMP_API_KEY", default=None)
MAILCHIMP_SERVER = env("MAILCHIMP_SERVER", default=None)
# NOTE List Name for production mailchimp audience is `CTO Tool`
MAILCHIMP_AUDIENCE_LIST_ID = env("MAILCHIMP_AUDIENCE_LIST_ID", default=None)
default_mailchimp_contact = """
{
    "company": "Sema Software",
    "address1": "308 Thornhill Road",
    "city": "Baltimore",
    "state": "MD",
    "zip": "21212",
    "country": "US"
}
"""
MAILCHIMP_AUDIENCE_CONTACT = json.loads(
    env(
        "MAILCHIMP_AUDIENCE_CONTACT",
        default=default_mailchimp_contact,
    )
)
MAILCHIMP_AUDIENCE_PERMISSION_REMINDER = env(
    "MAILCHIMP_AUDIENCE_PERMISSION_REMINDER",
    default=("You're receiving this email because you signed up for updates about AI Code Monitor."),
)
default_mailchimp_audience_campaign_defaults = """
{
    "from_name": "{APP_NAME}",
    "from_email": "support@semasoftware.com",
    "subject": "{APP_NAME} Updates",
    "language": "en"
}
""".replace("{APP_NAME}", APP_NAME)
MAILCHIMP_AUDIENCE_CAMPAIGN_DEFAULTS = json.loads(
    env(
        "MAILCHIMP_AUDIENCE_CONTACT",
        default=default_mailchimp_audience_campaign_defaults,
    )
)

# AWS Boto3 config
# https://boto3.amazonaws.com/v1/documentation/api/latest/guide/retries.html
BOTO3_CONFIG_RETRIES_MODE = env("BOTO3_CONFIG_RETRIES_MODE", default="standard")
BOTO3_CONFIG_RETRIES_MAX_ATTEMPTS = env("BOTO3_CONFIG_RETRIES_MAX_ATTEMPTS", default=3)
BOTO3_CONFIG_CONNECT_TIMEOUT = env("BOTO3_CONFIG_CONNECT_TIMEOUT", default=10)
BOTO3_CONFIG_READ_TIMEOUT = env("BOTO3_CONFIG_READ_TIMEOUT", default=10)

# AWS S3 config
AWS_ACCESS_KEY_ID = env("AWS_ACCESS_KEY_ID", default=None)
AWS_SECRET_ACCESS_KEY = env("AWS_SECRET_ACCESS_KEY", default=None)
AWS_STORAGE_BUCKET_NAME = env("AWS_STORAGE_BUCKET_NAME", default=None)
AWS_S3_REGION_NAME = env("AWS_S3_REGION_NAME", default=None)
AWS_S3_CUSTOM_DOMAIN = f"{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com"
AWS_S3_FILE_OVERWRITE = False
AWS_S3_SIGNATURE_VERSION = "s3v4"
AWS_S3_PRE_SIGNED_URL_EXPIRATION = 3600  # 1 hour
# For local development (DEBUG is True) we upload locally to the media directory
# For testing s3 bucket uploads locally, set AWS_S3_FORCE_UPLOAD_TO_BUCKET to True
AWS_S3_FORCE_UPLOAD_TO_BUCKET = env.bool(
    "AWS_S3_FORCE_UPLOAD_TO_BUCKET",
    default=False,
)


# BitBucket webhook URL (Proxy URL is used for local testing)
BITBUCKET_WEBHOOK_URL = env("BITBUCKET_WEBHOOK_PROXY_URL", default=f"{SITE_DOMAIN}/api/webhook-bitbucket/")

# BitBucket Oauth Consumer
# https://support.atlassian.com/bitbucket-cloud/docs/use-oauth-on-bitbucket-cloud/
BITBUCKET_OAUTH_CONSUMER_KEY = env("BITBUCKET_OAUTH_CONSUMER_KEY", default=None)
BITBUCKET_OAUTH_CONSUMER_SECRET = env("BITBUCKET_OAUTH_CONSUMER_SECRET", default=None)


# Jira Oauth Consumer
# https://developer.atlassian.com/cloud/oauth/getting-started/implementing-oauth-3lo/
JIRA_OAUTH_CONSUMER_KEY = env("JIRA_OAUTH_CONSUMER_KEY", default=None)
JIRA_OAUTH_CONSUMER_SECRET = env("JIRA_OAUTH_CONSUMER_SECRET", default=None)
# JIRA_OAUTH_REDIRECT_URL should be set if testing
# Jira integration locally using a reverse proxy
JIRA_OAUTH_REDIRECT_URL = env(
    "JIRA_OAUTH_REDIRECT_URL",
    default=f"{SITE_DOMAIN}/compass/api/v1/integrations/connect-jira-redirect/",
)


# Slack webhook URL
SLACK_WEBHOOK_ORGANIZATIONS = env.list("SLACK_WEBHOOK_ORGANIZATIONS", default=[])
SLACK_WEBHOOK_URL = env("SLACK_WEBHOOK_URL", default="")

# Mock llm calls in pipelines
MOCKED_END_DATE = env("MOCKED_END_DATE", default=None)

# Django admin environment banner. https://pypi.org/project/django-admin-env-notice/
ENVIRONMENT_NAME = env("DJANGO_ENV", default="DEVELOPMENT")
ENVIRONMENT_COLOR = {
    "DEVELOPMENT": "green",
    "PRODUCTION": "red",
}[ENVIRONMENT_NAME]
ENVIRONMENT_FLOAT = True
