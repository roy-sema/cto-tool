# Generated by Django 4.2.4 on 2024-02-22 21:59

from django.db import migrations, models
from django.db.migrations.operations import RunPython


rules = [
    {
        "gen_ai_guidance": "blended_only",
        "name": "Blended Code Only",
        "description": "OK to use GenAI code but modify it",
        "condition_mode": "all",
        "risk": "high",
        "conditions": [{"code_type": "pure", "operator": ">", "percentage": 0}],
    },
    {
        "gen_ai_guidance": "no_restrictions",
        "name": "No Restrictions",
        "description": "OK to use GenAI, no need to modify it.",
        "condition_mode": "all",
        "risk": "low",
        "conditions": [{"code_type": "ai", "operator": ">", "percentage": 0}],
    },
    {
        "gen_ai_guidance": "gen_ai_not_permitted",
        "name": "Gen AI Code Not Permitted",
        "description": "Using GenAI to code here is not safe. Do not use it.",
        "condition_mode": "all",
        "risk": "high",
        "conditions": [{"code_type": "ai", "operator": ">", "percentage": 0}],
    },
]


def add_rules(apps, schema_editor):
    Rule = apps.get_model("mvp", "Rule")
    RuleCondition = apps.get_model("mvp", "RuleCondition")
    RepositoryGroup = apps.get_model("mvp", "RepositoryGroup")
    for rule in rules:
        if not Rule.objects.filter(name=rule["name"], organization=None).exists():
            _rule = Rule.objects.create(
                name=rule["name"],
                description=rule["description"],
                condition_mode=rule["condition_mode"],
                risk=rule["risk"],
                display_as_global_rule=True,
            )
            for condition in rule["conditions"]:
                RuleCondition.objects.create(rule=_rule, **condition)

            groups = RepositoryGroup.objects.filter(
                gen_ai_guidance=rule["gen_ai_guidance"]
            )
            for group in groups:
                group.rules.set([_rule])


def remove_rules(apps, schema_editor):
    Rule = apps.get_model("mvp", "Rule")
    for rule in rules:
        Rule.objects.filter(name=rule["name"], organization=None).delete()


class Migration(migrations.Migration):

    dependencies = [
        ("mvp", "0077_rename_compliancestandardrule_rule_and_more"),
    ]

    operations = [
        RunPython(add_rules, remove_rules),
    ]
